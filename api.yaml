swagger: "2.0"
info:
  description: "API Documentation of Routine Management System consisting several CRUD featues and Authentication"
  version: "1.0.0"
  title: "Routine Management System API Docs"
  contact:
    name: "Parbat Lama"
    email: "np03cs4s210069@heraldcollege.edu.np"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: http://localhost:8000
  - url: https://rms-server-8080.herokuapp.com
tags:
- name: "Routine"
  description: "Operations related to Routine"
- name: "Admin"
  description: "Operations about Admin user"
- name: "Teacher"
  description: "Operations about Teacher user"
- name: "Student"
  description: "Operations about Student user"
schemes:
  - http
  - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /api/v4/student/Login:
    post:
      security:
        - Bearer: []    
      tags:
      - "Student"
      summary: "Student Login"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "uid"
        in: "query" 
        description: "The uid for login"
        required: true
        type: "string"

      responses:
        "400":
          description: "Unverified users"
          schema:
            properties: 
              message:
                type: string
                example: "Failed to login.  Please use correct email!"
              token:
                type: string
                example: "null"
        "200":
          description: "Login successful"
          schema:
            properties: 
              message:
                type: string
                example: "Login succesfully"
              access_token:
                type: string
                example: "s23241sfsdf.ad34fdsfdsdf.34sfgsfsfsfsd"
              refresh_token:
                type: string
                example: "s32241sfsdf.ad34fdsfdsdf.34sfgsfsfsfsd"
        "500":
          description: "500 Internal Server Error !"
          schema:
            properties: 
              message:
                type: string
                example: "500 Internal Server Error !"
              token:
                type: string
                example: "null"
  /api/v4/Logout:
    post:
      security:
        - Bearer: []     
      tags:
        - "Admin"
        - "Student"
        - "Teacher"    
      summary: "Logout"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Logout successful"
          schema:
            properties: 
              message:
                type: string
                example: "Logout sucessfull !!"
  /api/v4/admin/postRoutineData:
    post:
      security:
        - Bearer: []     
      tags:
        - "Admin"
        - "Routine"
      summary: "Posts Routine Data"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Routine"
      responses:
        "200":
          description: "Routine posted successfully!"
          schema:
            properties: 
              message:
                type: string
                example: "Routine posted successfully!"
        "404":
          description: "Some fields are missing. Please provide all the fields !!"
        "500":
          description: "500 Internal Server Error !"
          schema:
            properties: 
              message:
                type: string
                example: "Failed to post the routine !!"
  /api/v4/routines/getRoutineData:
    get:
      security:
        - Bearer: []     
      tags:
      - "Admin"
      - "Student"
      - "Teacher"  
      - "Routine"
      summary: "Gets routine data"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Got Routine Data Successfully"
          schema:
            $ref: "#/definitions/Routine"
        "404":
          description: "No results"
          schema:
            properties: 
              message:
                type: string
                example: "Result: 0 found !!"  
        "500":
          description: "500 Internal Server Error !"
          schema:
            properties: 
              message:
                type: string
                example: "500 Internal Server Error !"
  /api/v4/routines/getRoutineByLevel:
    get:
      security:
        - Bearer: []     
      tags:
      - "Admin"
      - "Student"
      - "Teacher" 
      - "Routine"
      summary: "Gets routine data by level"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "level"
        in: "query" 
        description: "The level for routine"
        required: true
        type: "string"
      responses:
        "200":
          description: "Got Routine Data Successfully"
          schema:
            $ref: "#/definitions/Routine"
        "404":
          description: "No results"
          schema:
            properties: 
              message:
                type: string
                example: "Result: 0 found !!"  
        "500":
          description: "500 Internal Server Error !"
          schema:
            properties: 
              message:
                type: string
                example: "500 Internal Server Error !"
  /api/v4/routines/getRoutineByGroup:
    get:
      security:
        - Bearer: []     
      tags:
      - "Admin"
      - "Student"
      - "Teacher"  
      - "Routine"
      summary: "Gets routine data by level"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "group"
        in: "query" 
        description: "The group for routine"
        required: true
        type: "string"
      responses:
        "200":
          description: "Got Routine Data Successfully"
          schema:
            $ref: "#/definitions/Routine"
        "404":
          description: "No results"
          schema:
            properties: 
              message:
                type: string
                example: "Result: 0 found !!"  
        "500":
          description: "500 Internal Server Error !"
          schema:
              properties:
                message:
                  type: string
                  example: "500 Internal Server Error !"
  /api/v4/admin/updateRoutineData:
    post:
      security:
        - Bearer: []     
      tags:
        - "Admin"
        - "Routine"
      summary: "Updates Routine Data"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Routine"
      responses:
        "200":
          description: "Routine updated successfully!"
          schema:
              properties:
                message:
                  type: string
                  example: "Routine updated successfully!"
        "500":
          description: "500 Internal Server Error !"
          schema:
              properties:
                message:
                  type: string
                  example: "500 Internal Server Error !"
  /api/v4/admin/deleteRoutineData:
    post:
      security:
        - Bearer: []     
      tags:
        - "Admin"
        - "Routine"
      summary: "Delete Routine Data"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "routineID"
        in: "query" 
        description: "The routine id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Routine deleted successfully!"
          schema:
              properties:
                message:
                  type: string
                  example: "Routine deleted successfully!"
        "500":
          description: "500 Internal Server Error !"
          schema:
              properties:
                message:
                  type: string
                  example: "500 Internal Server Error !"
  /api/v4/routines/searchRoutine:
    get:
      security:
        - Bearer: []     
      tags:
        - "Admin"
        - "Student"
        - "Teacher"
        - "Routine"
      summary: "Search Routine Data"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "module_name"
        in: "query" 
        description: "The module name to search"
        type: "string"
      - name: "group"
        in: "query" 
        description: "The group name to search"
        type: "string"
      responses:
        "200":
          description: "Routine searched successfully!"
          schema:
            $ref: "#/definitions/Routine"
        "404":
          description: "No results"
          schema:
            properties: 
              message:
                type: string
                example: "Result not found !!"  
        "500":
          description: "500 Internal Server Error !"
          schema:
              properties:
                message:
                  type: string
                  example: "500 Internal Server Error !"
  /api/v4/admin/Login:
    post:
      security:
        - Bearer: []     
      tags:
        - "Admin"
      summary: "Admin Login"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "query"
        description: "The email for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "Login successfully!"
          schema:
            properties: 
              message:
                type: string
                example: "Login succesfully"
              token:
                type: string
                example: "s23241sfsdf.ad34fdsfdsdf.34sfgsfsfsfsd"
        "412":
          description: "Wrong email or password !!"
          schema:
            properties: 
              message:
                type: string
                example: "Failed to login"
              token:
                type: string
                example: "null"
  /api/v4/admin/Signup:
    post:
      security:
        - Bearer: []     
      tags:
        - "Admin"
      summary: "Register new Admin"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "query"
        description: "The email for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "201":
          description: "Admin created successfully!"
          schema:
            properties: 
              message:
                type: string
                example: "Admin created succesfully"
        "500":
          description: "500 Internal Server Error !"
          schema:
            properties: 
              message:
                type: string
                example: "Failed to signup"
        "412":
          description: "User already exists"
          schema:
            properties: 
              message:
                type: string
                example: "Failed to signup"
  /api/v4/teacher/Login:
    post:
      security:
        - Bearer: []     
      tags:
        - "Teacher"
      summary: "Teacher Login"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "query"
        description: "The email for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "Login successfully!"
          schema:
            properties: 
              message:
                type: string
                example: "Login succesfully"
              token:
                type: string
                example: "s23241sfsdf.ad34fdsfdsdf.34sfgsfsfsfsd"
        "412":
          description: "Wrong email or password !!"
          schema:
            properties: 
              message:
                type: string
                example: "Failed to login"
              token:
                type: string
                example: "null"
        "500":
          description: "Login Attempt Exceed"
          schema:
            properties: 
              message:
                type: string
                example: "You exceed the 5 login attempt. Please wait for 5 min to retry again !!"

  /api/v4/teacher/Signup:
    post:
      security:
        - Bearer: []     
      tags:
        - "Teacher"
      summary: "Register new teacher"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "query"
        description: "The email for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "201":
          description: "Account created successfully!"
          schema:
            properties: 
              message:
                type: string
                example: "Account created succesfully"
        "500":
          description: "500 Internal Server Error !"
          schema:
            properties: 
              message:
                type: string
                example: "Failed to signup"
        "412":
          description: "User already exists"
          schema:
            properties: 
              message:
                type: string
                example: "Failed to signup"
  /api/v4/RegenerateToken:
    post:
      security:
        - Bearer: []     
      tags:
        - "Admin"
        - "Student"
        - "Teacher"    
      summary: "Regenerate Token"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          properties: 
            access_token:
              type: string
            refresh_token:
              type: string
      responses:
        "200":
          description: "Token regenerated succesfully!"
          schema:
            properties: 
              message:
                type: string
                example: "Token regenerated succesfully!"
              access_token:
                type: string
                example: "s23241sfsdf.ad34fdsfdsdf.34sfgsfsfsfsd"
              refresh_token:
                type: string
                example: "s32241sfsdf.ad34fdsfdsdf.34sfgsfsfsfsd"
        "500":
          description: "Refresh token cannot verified."
          schema:
            properties: 
              message:
                type: string
                example: "Refresh token cannot verified."
            
definitions:
  Routine:
    type: "object"
    properties:
      routineID:
        type: "string"
      course_type:
        type: "string"
        enum: 
        - "BIT"
        - "BIBM"
        - "IMBA"
      module_name:
        type: "string"
      lecturer_name:
        type: "string"
      level:
        type: "string"
        enum: 
        - "Level 4"
        - "Level 5"
        - "Level 6"
        - "Level 7"
      group:
        type: "string"
      room_name:
        type: "string"
      block_name:
        type: "string"
        enum:
        - "HCK"
        - "Wolverhampton"
      start_time:
        type: "string"
        format: "date-time"
      end_time:
        type: "string"
        format: "date-time"
      createdOn:
        type: "string"
  Teacher:
    type: "object"
    properties:
      email: 
        type: "string"
      password: 
        type: "string"
  Admin:
    type: "object"
    properties:
      email: 
        type: "string"
      password: 
        type: "string"
  Student:
    type: "object"
    properties:
      uid: 
        type: "string"
