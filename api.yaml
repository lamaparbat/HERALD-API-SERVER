swagger: "2.0"
info:
  description: |
    <img src="https://dev-herald-server.herokuapp.com/images/logo.png" alt="Herald College Kathmandu logo" width="400" height="100" />

    # API Documentation

    API Documentation of Herald College Application developed by **Herald Development Platform Community**.
    <img src="https://dev-herald-server.herokuapp.com/images/community.jpeg" alt="Development Platform Community logo" width="400" height="100" />
    ---

    ### ✨ Features 

      1. Routine Management System Backend
      2. Library Management System Backend
      3. RTE Management System Backend
      4. Student Service (Lost & Found)

    ---

    ### 🆕 Latest Updates 

      1. Isolated Versioning and configs (Into Production & Development)
      2. Password Hashing (SHA256) (Secure Hash Algorithm)
      3. Lost & Found services

    ---

    ### 🔔 Upcoming Updates 

      1. Concurrency -> PM2 (CPU Core Utilization Technique + Load Balancing)
      2. Social Media API Sync (Public API + Scrapping [Alternatives])
      3. In-Memory Caching (REDIS)
      4. Optimization...
      
    ---

    ### ⚒️ Things To Change

      1. Aggregation Framework for data mapping
      2. Devops + AWS Service integration [Premium]
      3. Log tracing & Management [Premium]
      
    ---

    ### ✅ Things Accomplished Until now

      1. Routine Management System.
      2. User Centered Authentication
      3. Dynamic Project Structure
      4. Scope Base Routes Authentication. (Available scopes -> ["Admin", "Teacher", "Student"])
      
    ---

  version: "1.0.6"
  title: "Herald College Kathmandu App"
  contact:
    name: "Backend Team"
    email: "np03cs4s210069@heraldcollege.edu.np"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: http://localhost:8000
  - url: https://dev-herald-server.herokuapp.com/
  - url: https://prod-herald-server.herokuapp.com/
tags:
  - name: "Routine"
    description: "Operations related to Routine"
  - name: "Admin"
    description: "Operations related to Admin user"
  - name: "Teacher"
    description: "Operations related to Teacher user"
  - name: "Student"
    description: "Operations related to Student user"
  - name: "Common"
    description: "Operations common to all users"
  - name: "Upload"
    description: "Operations related to upload college data"
  - name: "Feedback"
    description: "Operations related to feedbacks"
  - name: "Lost & Found"
    description: "Operations related to Lost & Found"
schemes:
  - https
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /api/v4/student/Login:
    post:
      security:
        - Bearer: []
      tags:
        - "Student"
      summary: "Student Login"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Student"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            properties:
              message:
                type: "string"
                example: "Unverified user"
              token:
                type: "string"
                example: "null"
        "200":
          description: "OK"
          schema:
            properties:
              message:
                type: "string"
                example: "Login succesfully"
              email:
                type: "string"
                example: "np03cs4s210869@heraldcollege.edu.np"
              scope:
                type: "string"
                example: "student"
              group:
                type: "string"
              accessToken:
                type: "string"
                example: "s23241sfsdf.ad34fdsfdsdf.34sfgsfsfsfsd"
              refreshToken:
                type: "string"
                example: "s32241sfsdf.ad34fdsfdsdf.34sfgsfsfsfsd"
        "203":
          description: "NON_AUTHORITATIVE_INFORMATION"
          schema:
            properties:
              message:
                type: "string"
                example: "Failed to login. Please use correct email !!"
              token:
                type: "string"
                example: "null"
        "403":
          description: "FORBIDDEN"
          schema:
            properties:
              message:
                type: "string"
                example: "You exceed the 5 login attempt. Please try again after 5 min !!"
              token:
                type: "string"
                example: "null"
        "500":
          description: "INTERNAL_SERVER_ERROR"
          schema:
            properties:
              message:
                type: "string"
                example: "500. SERVER ERROR!!"
              token:
                type: "string"
                example: "null"
  /api/v4/Logout:
    post:
      security:
        - Bearer: []
      tags:
        - "Common"
      summary: "Logout"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "OK"
          schema:
            properties:
              message:
                type: "string"
                example: "Logout sucessfull !!"
  /api/v4/admin/postRoutineData:
    post:
      security:
        - Bearer: []
      tags:
        - "Routine"
      summary: "Posts Routine Data"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Routine"
      responses:
        "200":
          description: "OK"
          schema:
            properties:
              message:
                type: "string"
                example: "Routine posted successfully!"
        "206":
          description: "PARTIAL_CONTENT"
          schema:
            properties:
              message:
                type: "string"
                example: "Some fields are missing. Please provide all the fields !!"
        "503":
          description: "SERVICE_UNAVAILABLE"
          schema:
            properties:
              message:
                type: "string"
                example: "Failed to post the routine !!"
  /api/v4/routines:
    get:
      security:
        - Bearer: []
      tags:
        - "Routine"
      summary: "Gets routine data"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "group"
          description: "The name of group"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Routine"
        "204":
          description: "NO_CONTENT"
          schema:
            properties:
              message:
                type: "string"
                example: "Result: 0 found !!"
  /api/v4/admin/updateRoutineData:
    put:
      security:
        - Bearer: []
      tags:
        - "Routine"
      summary: "Updates Routine Data"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Routine"
      responses:
        "201":
          description: "CREATED"
          schema:
            properties:
              message:
                type: "string"
                example: "Routine updated successfully!"
        "500":
          description: "INTERNAL_SERVER_ERROR"
          schema:
            properties:
              message:
                type: "string"
                example: "500. SERVER ERROR!!"
  /api/v4/admin/deleteRoutineData:
    delete:
      security:
        - Bearer: []
      tags:
        - "Routine"
      summary: "Delete Routine Data"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            properties:
              routineID:
                type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            properties:
              message:
                type: "string"
                example: "Routine deleted successfully!"
        "500":
          description: "INTERNAL_SERVER_ERROR"
          schema:
            properties:
              message:
                type: "string"
                example: "Failed to delete routine !!"
  /api/v4/admin/Login:
    post:
      security:
        - Bearer: []
      tags:
        - "Admin"
      summary: "Admin Login"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Admin"
      responses:
        "200":
          description: "OK"
          schema:
            properties:
              message:
                type: "string"
                example: "Login succesfully"
              email:
                type: "string"
                example: "nirmal55@gmail.com"
              scope:
                type: "string"
                example: "admin"
              accessToken:
                type: "string"
                example: "s23241sfsdf.ad34fdsfdsdf.34sfgsfsfsfsd"
              refreshToken:
                type: "string"
                example: "s23241sfsdf.ad34fdsfdsdf.34sfgsfsfsfsd"
        "401":
          description: "UNAUTHORIZED"
          schema:
            properties:
              message:
                type: "string"
                example: "Wrong email or password !!"
              token:
                type: "string"
                example: "null"
        "403":
          description: "FORBIDDEN"
          schema:
            properties:
              message:
                type: "string"
                example: "You exceed the 5 login attempt. Please try again after 5 min !!"
              token:
                type: "string"
                example: "null"
  /api/v4/admin/Signup:
    post:
      security:
        - Bearer: []
      tags:
        - "Admin"
      summary: "Register new Admin"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Admin"
      responses:
        "201":
          description: "CREATED"
          schema:
            properties:
              message:
                type: "string"
                example: "Admin created succesfully"
        "409":
          description: "CONFLICT"
          schema:
            properties:
              message:
                type: "string"
                example: "Failed to signup"
        "500":
          description: "INTERNAL_SERVER_ERROR"
          schema:
            properties:
              message:
                type: "string"
                example: "500. SERVER ERROR!!"
  /api/v4/teacher/Login:
    post:
      security:
        - Bearer: []
      tags:
        - "Teacher"
      summary: "Teacher Login"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Teacher"
      responses:
        "200":
          description: "OK"
          schema:
            properties:
              message:
                type: "string"
                example: "Login succesfully"
              email:
                type: "string"
                example: "bishalkhadka32@gmail.com"
              scope:
                type: "string"
                example: "teacher"
              accessToken:
                type: "string"
                example: "s23241sfsdf.ad34fdsfdsdf.34sfgsfsfsfsd"
              refreshToken:
                type: "string"
                example: "s23241sfsdf.ad34fdsfdsdf.34sfgsfsfsfsd"
        "203":
          description: "NON_AUTHORITATIVE_INFORMATION"
          schema:
            properties:
              message:
                type: "string"
                example: "Wrong email or password !!"
              token:
                type: "string"
                example: "null"
        "500":
          description: "INTERNAL_SERVER_ERROR"
          schema:
            properties:
              message:
                type: "string"
                example: "Failed to login"
  /api/v4/teacher/Signup:
    post:
      security:
        - Bearer: []
      tags:
        - "Teacher"
      summary: "Register new teacher"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Teacher"
      responses:
        "201":
          description: "CREATED"
          schema:
            properties:
              message:
                type: "string"
                example: "Teachers created succesfully !!"
        "409":
          description: "CONFLICT"
          schema:
            properties:
              message:
                type: "string"
                example: "User already exists !!"
        "500":
          description: "INTERNAL_SERVER_ERROR"
          schema:
            properties:
              message:
                type: "string"
                example: "500. SERVER ERROR!!"
  /api/v4/uploadStudentList:
    post:
      security:
        - Bearer: []
      tags:
        - "Upload"
      summary: "Upload Student Excel Sheet"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            properties:
              file:
                type: "object"
      responses:
        "200":
          description: "OK"
          schema:
            properties:
              message:
                type: "string"
                example: "Data extracted and import to DB successfully."
        "406":
          description: "NOT_ACCEPTABLE"
          schema:
            properties:
              message:
                type: "string"
                example: "Failed to parse the given file. Please upload the xlsx formate file only !!"
        "500":
          description: "INTERNAL_SERVER_ERROR"
          schema:
            properties:
              message:
                type: "string"
                example: "Failed to parse the given file. Please upload the xlsx formate file only !!!"
  /api/v4/RegenerateToken:
    put:
      security:
        - Bearer: []
      tags:
        - "Common"
      summary: "Regenerate Token"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            properties:
              uid:
                type: "string"
      responses:
        "201":
          description: "CREATED"
          schema:
            properties:
              message:
                type: "string"
                example: "Token regenerated succesfully!"
              accessToken:
                type: "string"
                example: "s23241sfsdf.ad34fdsfdsdf.34sfgsfsfsfsd"
              refreshToken:
                type: "string"
                example: "s32241sfsdf.ad34fdsfdsdf.34sfgsfsfsfsd"
        "500":
          description: "INTERNAL_SERVER_ERROR"
          schema:
            properties:
              message:
                type: "string"
                example: "Refresh token cannot verified."
  /api/v4/feedback/postFeedback:
    post:
      security:
        - Bearer: []
      tags:
        - "Feedback"
      summary: "Regenerate Token"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Feedback"
      responses:
        "200":
          description: "OK"
          schema:
            properties:
              message:
                type: "string"
                example: "Feedback posted successfully !!"
        "404":
          description: "NOT_FOUND"
          schema:
            properties:
              message:
                type: "string"
                example: "Some fields are missing"
        "422":
          description: "UNPROCESSABLE_ENTITY"
          schema:
            properties:
              message:
                type: "string"
                example: "Validaton issues."
        "500":
          description: "INTERNAL_SERVER_ERROR"
          schema:
            properties:
              message:
                type: "string"
                example: "500. SERVER ERROR!!"
  /api/v4/feedback/getFeedback:
    get:
      security:
        - Bearer: []
      tags:
        - "Feedback"
      summary: "Get Feedback"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "OK"
          schema:
            properties:
              message:
                type: "string"
                example: "Got Feedback successfully !!"
        "204":
          description: "NO_CONTENT"
          schema:
            properties:
              message:
                type: "string"
                example: "Result: 0 found !!"
  /api/v4/feedback/deleteFeedback:
    delete:
      security:
        - Bearer: []
      tags:
        - "Feedback"
      summary: "Delete Feedback"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            properties:
              feedbackid:
                type: "string"
                example: "as23vd34dvfv"
              filename:
                type: "string"
                example: "abc.png"
      responses:
        "201":
          description: "CREATED"
          schema:
            properties:
              message:
                type: "string"
                example: "Feedback deleted successfully !!"
        "406":
          description: "NOT_ACCEPTABLE"
          schema:
            properties:
              message:
                type: "string"
                example: "Invalid feedback ID !!"
        "500":
          description: "INTERNAL_SERVER_ERROR"
          schema:
            properties:
              message:
                type: "string"
                example: "500. SERVER ERROR!!"
  /api/v4/getNotifications:
    get:
      security:
        - Bearer: []
      tags:
        - "Common"
      summary: "Get Notification"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "group"
          description: "The name of group"
          in: "query"
          required: true
          type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Notification"
        "404":
          description: "NOT_FOUND"
          schema:
            properties:
              message:
                type: "string"
  /api/v4/lf/losts:
    get:
      security:
        - Bearer: []
      tags:
        - "Lost & Found"
      summary: "Get Lost & Found"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/LostReport"
        "204":
          description: "NO_CONTENT"
          schema:
            properties:
              message:
                type: "string"
                example: "Result: 0 found !!"
  /api/v4/lf/report:
    post:
      security:
        - Bearer: []
      tags:
        - "Lost & Found"
      summary: "Post Lost & Found"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/LostReport"
      responses:
        "200":
          description: "OK"
          schema:
            properties:
              message:
                type: "string"
                example: "Report posted successfully !!"
        "404":
          description: "NOT_FOUND"
          schema:
            properties:
              message:
                type: "string"
                example: "Some fields are missing"
        "422":
          description: "UNPROCESSABLE_ENTITY"
          schema:
            properties:
              message:
                type: "string"
                example: "Validaton issues."
        "500":
          description: "INTERNAL_SERVER_ERROR"
          schema:
            properties:
              message:
                type: "string"
                example: "500. SERVER ERROR!!"
  /api/v4/lf/update:
    put:
      security:
        - Bearer: []
      tags:
        - "Lost & Found"
      summary: "Update Lost & Found"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/LostReport"
      responses:
        "200":
          description: "OK"
          schema:
            properties:
              message:
                type: "string"
                example: "Report updated successfully !!"
        "500":
          description: "INTERNAL_SERVER_ERROR"
          schema:
            properties:
              message:
                type: "string"
                example: "500. SERVER ERROR!!"
definitions:
  Routine:
    type: "object"
    properties:
      courseType:
        type: "string"
      moduleName:
        type: "string"
      lecturerName:
        type: "string"
      classType:
        type: "string"
      group:
        type: "string"
      roomName:
        type: "string"
      blockName:
        type: "string"
      day:
        type: "string"
      startTime:
        type: "string"
        format: "date-time"
      endTime:
        type: "string"
        format: "date-time"
      status:
        type: "string"
  Teacher:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
  Admin:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
  Student:
    type: "object"
    properties:
      uid:
        type: "string"
  Feedback:
    type: "object"
    properties:
      reportType:
        type: "string"
      description:
        type: "string"
      file:
        type: "object"
  LostReport:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          type: "string"
      desc:
        type: "string"
      lostDate:
        type: "string"
        format: "date-time"
      isVictimRecievedData:
        type: "string"
  Notification:
    type: "object"
    properties:
      message:
        type: "string"
      group:
        type: "string"
